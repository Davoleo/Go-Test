// +build !js

package g2d

import (
    "fmt"
    "github.com/gen2brain/dlgs"
    "github.com/veandco/go-sdl2/img"
    "github.com/veandco/go-sdl2/mix"
    "github.com/veandco/go-sdl2/sdl"
    "github.com/veandco/go-sdl2/ttf"
    "io"
    "net/http"
    "os"
)

var window *sdl.Window
var renderer *sdl.Renderer
var texture *sdl.Texture
var textures = make(map[*sdl.Surface]*sdl.Texture)
var usrUpdate func()
var usrKeydown, usrKeyup func(string)
var mousePos = Point{0, 0}
var mouseCodes = []string{"LeftButton", "MiddleButton", "RightButton"}
var delay = uint32(1000/30)

func sdlrect(r Rect) *sdl.Rect {
    return &sdl.Rect{int32(r.X), int32(r.Y), int32(r.W), int32(r.H)}
}

func InitCanvas(size Size) {
    err := sdl.Init(sdl.INIT_EVERYTHING)
    if err != nil {
        panic(err)
    }
    err = ttf.Init()
    if err != nil {
        panic(err)
    }
    w, h := int32(size.W), int32(size.H)
    //win, ren, err := sdl.CreateWindowAndRenderer(w, h, 0)
    window, err = sdl.CreateWindow("", sdl.WINDOWPOS_UNDEFINED,
        sdl.WINDOWPOS_UNDEFINED, w, h, sdl.WINDOW_OPENGL)
    if err != nil {
        panic(err)
    }
    renderer, err = sdl.CreateRenderer(window, -1,
        sdl.RENDERER_ACCELERATED|sdl.RENDERER_PRESENTVSYNC)
    if err != nil {
        panic(err)
    }
    if renderer.RenderTargetSupported() {
        texture, err = renderer.CreateTexture(sdl.PIXELFORMAT_RGBA8888,
            sdl.TEXTUREACCESS_TARGET, w, h)
        renderer.SetRenderTarget(texture)
    }
    SetColor(Color{127, 127, 127})
    ClearCanvas()
    UpdateCanvas()
}

func Prompt(a ...interface{}) string {
    if renderer != nil {
        UpdateCanvas()
    }
    val, _, _ := dlgs.Entry("", fmt.Sprint(a...), "")
    return val
}

func Confirm(a ...interface{}) bool {
    if renderer != nil {
        UpdateCanvas()
    }
    val, _ := dlgs.Question("", fmt.Sprint(a...), true)
    return val
}

func Alert(a ...interface{}) {
    if renderer != nil {
        UpdateCanvas()
    }
    dlgs.Info("", fmt.Sprint(a...))
    //fmt.Println(a...)
}

func Println(a ...interface{}) {
    fmt.Println(a...)
}

func UpdateCanvas() {
    if texture != nil {
        renderer.SetRenderTarget(nil)
        renderer.Copy(texture, nil, nil)
        renderer.Present()
        renderer.SetRenderTarget(texture)
        return
    }
    renderer.Present()
}

func SetColor(c Color) {
    renderer.SetDrawColor(uint8(c.R), uint8(c.G), uint8(c.B), 255)
}

func ClearCanvas() {
    r, g, b, a, _ :=  renderer.GetDrawColor()
    renderer.SetDrawColor(255, 255, 255, 255)
    renderer.Clear()
    renderer.SetDrawColor(r, g, b, a)
}

func DrawLine(pt1, pt2 Point) {
    renderer.DrawLine(int32(pt1.X), int32(pt1.Y),
        int32(pt2.X), int32(pt2.Y))
}

func FillCircle(center Point, radius int) {
    x0, y0 := int32(center.X), int32(center.Y)
    x, y, err := int32(radius), int32(0), int32(0)
    for x >= y {
        // Each of the following renders an octant of the circle
        renderer.DrawLine(x0+x, y0-y, x0-x, y0-y)
        renderer.DrawLine(x0+x, y0+y, x0-x, y0+y)
        renderer.DrawLine(x0-y, y0-x, x0+y, y0-x)
        renderer.DrawLine(x0-y, y0+x, x0+y, y0+x)

        if err <= 0 {
            y += 1
            err += 2*y + 1
        }
        if err > 0 {
            x -= 1
            err -= 2*x + 1
        }
    }
}

func FillRect(r Rect) {
    renderer.FillRect(sdlrect(r))
}

func LoadImage(url string) *sdl.Surface {
    image, err := img.Load(url)
    if err != nil {
        panic(err)
    }
    return image
}

func DrawImage(img *sdl.Surface, pos Point) {
    DrawImageClip(img, Rect{0, 0, int(img.W), int(img.H)},
        Rect{pos.X, pos.Y, int(img.W), int(img.H)})
}

func DrawImageClip(img *sdl.Surface, src Rect, dst Rect) {
    t, found := textures[img]
    if !found {
        t, err := renderer.CreateTextureFromSurface(img)
        if err != nil {
            panic(err)
        }
        textures[img] = t
    }
    renderer.Copy(t, sdlrect(src), sdlrect(dst))
}

func DrawText(txt string, pos Point, size int) {
    drawText(txt, pos, size, false)
}

func DrawTextCentered(txt string, pos Point, size int) {
    drawText(txt, pos, size, true)
}

func drawText(txt string, pos Point, size int, centered bool) {
    fname := "_Roboto-Regular.ttf"
    if _, err := os.Stat(fname); os.IsNotExist(err) {
        out, _ := os.Create(fname)
        defer out.Close()
        resp, _ := http.Get("https://github.com/google/fonts/blob/master/apache/roboto/Roboto-Regular.ttf?raw=true")
        defer resp.Body.Close()
        _, _ = io.Copy(out, resp.Body)
    }
    font, err := ttf.OpenFont(fname, size)
    defer font.Close()
    if err != nil {
        panic(err)
    }
    r, g, b, a, _ := renderer.GetDrawColor()
    sur, err := font.RenderUTF8Blended(txt, sdl.Color{r, g, b, a})
    if err != nil {
        panic(err)
    }
    x, y, w, h := int32(pos.X), int32(pos.Y), sur.W, sur.H
    if centered {
        x, y = x-w/2, y-h/2
    }
    //DrawImage(surface, pos)

    t, err := renderer.CreateTextureFromSurface(sur)
    if err != nil {
        panic(err)
    }
    renderer.Copy(t, &sdl.Rect{0, 0, w, h}, &sdl.Rect{x, y, w, h})
    t.Destroy()
}

func LoadAudio(url string) *mix.Music {
    mus, err := mix.LoadMUS(url)
    if err != nil {
        panic(err)
    }
    return mus
}

func PlayAudio(audio *mix.Music, loop bool) {
    if loop {
        audio.Play(-1)
    } else {
        audio.Play(0)
    }
}

func PauseAudio(audio *mix.Music) {
    mix.HaltMusic()
}

func webkey(e *sdl.KeyboardEvent) string {
    n := sdl.GetKeyName(e.Keysym.Sym)
    if "a" <= n && n <= "a" {
        n = string(n[0]-'a'+'A') + n[1:]
    }
    if len(n) == 1 && "A" <= n && n <= "Z" {
        n = "Key" + n
    } else if len(n) == 1 && "0" <= n && n <= "9" {
        n = "Digit" + n
    } else if n == "Up" || n == "Down" || n == "Right" || n == "Left" {
        n = "Arrow" + n
    }
    return n
}

func HandleEvents(update func(), keyFuncs ...func(string)) {
    usrUpdate, usrKeydown, usrKeyup = update, nil, nil
    if len(keyFuncs) >= 2 {
        usrKeydown, usrKeyup = keyFuncs[0], keyFuncs[1]
    } else if len(keyFuncs) == 1 {
        usrKeydown = keyFuncs[0]
    }
}

func MousePosition() Point {
    return mousePos
}

func MainLoop(fps ...int) {
    if len(fps) > 0 {
        delay = uint32(1000/fps[0])
    }
    defer CloseCanvas()
    UpdateCanvas()
    for running := true; running; {
        for e := sdl.PollEvent(); e != nil; e = sdl.PollEvent() {
            switch v := e.(type) {
            case *sdl.QuitEvent:
                running = false
                break
            case *sdl.KeyboardEvent:
                if v.Repeat != 0 {
                } else if v.Type == sdl.KEYDOWN && usrKeydown != nil {
                    usrKeydown(webkey(v))
                    UpdateCanvas()
                } else if v.Type == sdl.KEYUP && usrKeyup != nil {
                    usrKeyup(webkey(v))
                    UpdateCanvas()
                }
            case *sdl.MouseMotionEvent:
                mousePos.X, mousePos.Y = int(v.X), int(v.Y)
            case *sdl.MouseButtonEvent:
                if v.Button < 1 || 3 < v.Button {
                } else if v.State == sdl.PRESSED && usrKeydown != nil {
                    usrKeydown(mouseCodes[v.Button-1])
                    UpdateCanvas()
                } else if v.State == sdl.RELEASED && usrKeyup != nil {
                    usrKeyup(mouseCodes[v.Button-1])
                    UpdateCanvas()
                }
            }
        }
        if usrUpdate != nil {
            usrUpdate()
            UpdateCanvas()
        }
        sdl.Delay(delay)
    }
}

func CloseCanvas() {
    defer os.Exit(0)
    defer sdl.Quit()
    defer ttf.Quit()
    defer window.Destroy()
}
